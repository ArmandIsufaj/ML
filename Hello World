%% ----------------------------------------------------------------------- Hello World ---------------------------------------------------------------------------

% Imports
import tensorflow as tf
import numpy as np
from tensorflow import keras


% Function
def my_function( x):
    y = (3 * x) + 1;
    return y;

% Neural Network Structure
model = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])

% It has 1 layer, and that layer has 1 neuron, and the input shape to it is just 1 value.
% Layer: keras.layers.Dense()
% Unit: starting nuerons 
% Input shape = A shape tuple (integers), not including the batch size.
% shape=(32,) indicates that the expected input will be batches of 32-dimensional vectors. Elements of this tuple can be

% Compile NN
model.compile(optimizer='sgd', loss='mean_squared_error')

% The Optimizer function makes another guess based on how the loss function went, it will try to minimize the loss.
% The LOSS function measures the guessed answers against the known correct answers and measures how well or how badly it did.
% MEAN SQUARED ERROR and STOCHASTIC GRADIENT DESCENT

% Next up we'll feed in some data.
xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
ys = np.array([-2.0, 1.0, 4.0, 7.0, 10.0, 13.0], dtype=float)

% Train the NN
model.fit(xs, ys, epochs=500)

% Then use the NN to predict for data not in the set
print(model.predict([10.0]))

